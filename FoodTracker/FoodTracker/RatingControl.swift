//
//  RatingControl.swift
//  FoodTracker
//
//  Created by Jose Fraga on 3/16/18.
//  Copyright ¬© 2018 Jose Fraga. All rights reserved.
//

import UIKit

@IBDesignable class RatingControl: UIStackView {
    
    // MARK: Properties
    // A property that contains the list of buttons. Do not want anything outside the RatingControl class access to these buttons; therefore, you declare them as private.
    private var ratingButtons = [UIButton]()
    
    var rating = 0 {
        // Adding a property observer to the rating property, and having it call...method whenever the rating changes.
        didSet {
            updateButtonSelectionStates()
        }
    }
    
    // These lines define the size of your buttons and the number of buttons in your control.
    @IBInspectable var starSize: CGSize = CGSize(width: 44.0, height: 44.0) {
        
        // To update the control, need to reset the control's buttons every time these attributes change. To do that, add a property observer to each property. A property observer observes and responds to changes in a property's value.
        didSet {
            setupButtons()
        }
    }
    
    @IBInspectable var starCount: Int = 5 {
        
        didSet {
            setupButtons()
        }
    }
    
    // MARK: Initialization
    override init(frame: CGRect) {
        
        super.init(frame: frame)
        setupButtons()
    }
    
    required init(coder: NSCoder) {
        
        super.init(coder: coder)
        setupButtons()
    }
    
    // MARK: Button Action
    @objc func ratingButtonTapped(button: UIButton) {
        
        // testing...
        //print("Button pressed üëç")
        
        guard let index = ratingButtons.index(of: button) else {
            fatalError("The button, \(button), is not in the ratingButtons array: \(ratingButtons)")
        }
        
        // We have the index of the button in the array. Add 1 because noncoder people bro.
        // Calculate the rating of the selected button
        let selectedRating = index + 1
        
        if selectedRating == rating {
            // If the selected star represents the current rating, reset the rating to 0.
            rating = 0
        } else {
            // Otherwise set the rating to the selected star
            rating = selectedRating
        }
    }
    
    // MARK: Private Methods
    private func setupButtons() {
        
        // clear any existing buttons
        for button in ratingButtons {
            // Remove the button from the list of views managed by the stack view. Tells the stack view that it should no longer calculate the button's size and positon-but the button is still a subview of the stack view.
            removeArrangedSubview(button)
            // Removes the button from the stack view entirely.
            button.removeFromSuperview()
        }
        // Once all the buttons have been removed, it clears the ratingButtons array
        ratingButtons.removeAll()
        
        // Load the star images from the assets catalog. The app can load the images using the shorter UIImage(named:) method. However, because the control is @IBDesignable, the setup code also needs to run in Interface Builder. For the images to load properly in Interface Builder, you must explicitly specify the catalog's bundle.
        // Load Button Images
        let bundle = Bundle(for: type(of: self))
        let filledStar = UIImage(named: "filledStar", in: bundle, compatibleWith: self.traitCollection)
        let emptyStar = UIImage(named: "emptyStar", in: bundle, compatibleWith: self.traitCollection)
        let highlightedStar = UIImage(named: "highlightedStar", in: bundle, compatibleWith: self.traitCollection)
        
        // Underscore (_) represents a wildcard, which you can use when you don't need to know which iteration of the loop is currently executing.
        // First for-in declaration code is to add accessibility labels, values, and hints for those with special needs.
        for index in 0..<starCount {
        //for _ in 0..<starCount {
            // Create the button
            let button = UIButton()
            
            // Set the button images
            button.setImage(emptyStar, for: .normal)
            button.setImage(filledStar, for: .selected)
            button.setImage(highlightedStar, for: .highlighted)
            button.setImage(highlightedStar, for: [.highlighted, .selected])
            
            // Add constraints
            // This first line of code disables the button's automatically generated constraints. Typically, when using Auto Layout, you want to replace these autogenerated constraints with your own.
            button.translatesAutoresizingMaskIntoConstraints = false
            // The second line and third line of code create the constraints that define the button's height and width. (44 point x 44 point).
            button.heightAnchor.constraint(equalToConstant: starSize.height).isActive = true
            button.widthAnchor.constraint(equalToConstant: starSize.width).isActive = true
            
            
            // Set the accessibility label
            button.accessibilityLabel = "Set \(index + 1) star rating"
            
            // Setup the button action
            button.addTarget(self, action: #selector(RatingControl.ratingButtonTapped(button:)), for: .touchUpInside)
            
            // Add the button to the stack.
            // This method adds the button your created to the list of views managed by the RatingControl stack view. This action adds the view as a subview of the RatingControl, and also instructs the RatingControl to create the constraints needed to manage the button's position within the control.
            addArrangedSubview(button)
            
            // Add the new button to the rating button array.
            // As you create each button, you add it to the ratingButtons array.
            ratingButtons.append(button)
        }
        
        // Need to update the button's selection state whenever buttons are added to the control. Call to the...method
        updateButtonSelectionStates()
    }
    
    // This is a helper method that you'll use to update the selection state of the buttons.
    private func updateButtonSelectionStates() {
        
        // Iterates through the buttons and sets each one's selected state based on its position and the rating. Selected state affects the button's appearance. If the button's index is less than the rating, the isSelected property is set to true, and the button displays the filled-in star image. Otherwise false, empty star image.
        for (index, button) in ratingButtons.enumerated() {
            // If the index of a button is less than the rating, that button should be selected.
            button.isSelected = index < rating
            
            // Accessibility for those with special needs.
            // Set the hint string for the currently selected star.
            let hintString: String?
            if rating == index + 1 {
                hintString = "Tap to reset the rating to zero."
            } else {
                hintString = nil
            }
            
            // Calculate the value string
            let valueString: String
            switch (rating) {
            case 0:
                valueString = "No rating set."
            case 1:
                valueString = "1 star set."
            default:
                valueString = "\(rating) stars set."
            }
            
            // Assign the hint string and value string
            button.accessibilityHint = hintString
            button.accessibilityValue = valueString
        }
    }
}
